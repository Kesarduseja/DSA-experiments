#include <stdio.h>
#include <stdlib.h>

#define MAX 100

int adj[MAX][MAX];   // Adjacency matrix
int visited[MAX];    // Visited array
int queue[MAX];      // Queue for BFS
int front = -1, rear = -1;
int n;               // Number of vertices

// Function to add edge in directed graph
void addEdge(int src, int dest) {
    adj[src][dest] = 1;  // For directed graph
}

// DFS function
void DFS(int vertex) {
    visited[vertex] = 1;
    printf("%d ", vertex);

    for (int i = 0; i < n; i++) {
        if (adj[vertex][i] == 1 && !visited[i]) {
            DFS(i);
        }
    }
}

// Enqueue function for BFS
void enqueue(int vertex) {
    if (rear == MAX - 1) {
        printf("Queue overflow\n");
        return;
    }

    if (front == -1)
        front = 0;
    rear++;
    queue[rear] = vertex;
}

// Dequeue function for BFS
int dequeue() {
    if (front == -1 || front > rear)
        return -1;
    return queue[front++];
}

// BFS function
void BFS(int startVertex) {
    for (int i = 0; i < n; i++)
        visited[i] = 0;

    enqueue(startVertex);
    visited[startVertex] = 1;

    while (front <= rear) {
        int currentVertex = dequeue();
        printf("%d ", currentVertex);

        for (int i = 0; i < n; i++) {
            if (adj[currentVertex][i] == 1 && !visited[i]) {
                enqueue(i);
                visited[i] = 1;
            }
        }
    }
}

// Reset visited array
void resetVisited() {
    for (int i = 0; i < n; i++)
        visited[i] = 0;
}

// Main function
int main() {
    int edges, src, dest, start;

    printf("Enter number of vertices: ");
    scanf("%d", &n);

    printf("Enter number of edges: ");
    scanf("%d", &edges);

    // Initialize adjacency matrix to 0
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            adj[i][j] = 0;

    printf("Enter edges (source destination):\n");
    for (int i = 0; i < edges; i++) {
        scanf("%d %d", &src, &dest);
        addEdge(src, dest);
    }

    printf("Enter starting vertex for DFS: ");
    scanf("%d", &start);
    resetVisited();
    printf("DFS traversal: ");
    DFS(start);
    printf("\n");

    printf("Enter starting vertex for BFS: ");
    scanf("%d", &start);
    front = rear = -1;
    resetVisited();
    printf("BFS traversal: ");
    BFS(start);
    printf("\n");

    return 0;
}

